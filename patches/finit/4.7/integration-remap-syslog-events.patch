
This is a WeOS integration patch.  As such it must never be upstreamed, because we are
changing a behavior of an upstream component to fit WeOS specific requirements and any
legacy needs we might have.

In this case the exact format of the below log messages are:

  1. Encoded as regexps in Fawlty test logging/security_related_events, and
  2. Conveyed to Bombardier as the format for when they convert syslog to SEDL messages

In either case we can handle the change, but have opted at this time not to take the
change request notification to the customer.

			-- Joachim Wiberg

--- a/src/service.c
+++ b/src/service.c
@@ -863,7 +863,7 @@
 	}
 
 	if (!svc_is_sysv(svc))
-		logit(LOG_CONSOLE | LOG_NOTICE, "Starting %s[%d]", svc_ident(svc, NULL, 0), pid);
+		logit(LOG_CONSOLE | LOG_NOTICE, "Starting %s:%s, PID: %d", basename(svc->cmd), svc->id, pid);
 
 	switch (svc->type) {
 	case SVC_TYPE_RUN:
@@ -913,7 +913,8 @@
 	}
 
 	dbg("%s: Sending SIGKILL to process group %d", nm, svc->pid);
-	logit(LOG_CONSOLE | LOG_NOTICE, "Stopping %s[%d], sending SIGKILL ...", id, svc->pid);
+	logit(LOG_CONSOLE | LOG_NOTICE, "Stopping %s:%s, PID: %d, sending SIGKILL ...",
+	      basename(svc->cmd), svc->id, svc->pid);
 	if (runlevel != 1)
 		print_desc("Killing ", svc->desc);
 
@@ -1003,7 +1004,8 @@
 		}
 
 		dbg("Sending %s to pid:%d name:%s(%s)", sig, svc->pid, id, nm);
-		logit(LOG_CONSOLE | LOG_NOTICE, "Stopping %s[%d], sending %s ...", id, svc->pid, sig);
+		logit(LOG_CONSOLE | LOG_NOTICE, "Stopping %s:%s, PID: %d, sending %s ...",
+		      basename(svc->cmd), svc->id, svc->pid, sig);
 	} else {
 		logit(LOG_CONSOLE | LOG_NOTICE, "Calling '%s stop' ...", cmdline);
 	}
@@ -1129,8 +1131,8 @@
 		print_desc("Restarting ", svc->desc);
 
 	dbg("Sending SIGHUP to PID %d", svc->pid);
-	logit(LOG_CONSOLE | LOG_NOTICE, "Restarting %s[%d], sending SIGHUP ...",
-	      svc_ident(svc, NULL, 0), svc->pid);
+	logit(LOG_CONSOLE | LOG_NOTICE, "Restarting %s:%s, PID: %d, sending SIGHUP ...",
+	      basename(svc->cmd), svc->id, svc->pid);
 	rc = kill(svc->pid, SIGHUP);
 	if (rc == -1 && (errno == ESRCH || errno == ENOENT)) {
 		/* nobody home, reset internal state machine */
@@ -2210,8 +2212,8 @@
 
 	/* Peak instability index */
 	if (svc->restart_max != -1 && *restart_cnt >= svc->restart_max) {
-		logit(LOG_CONSOLE | LOG_WARNING, "Service %s keeps crashing, not restarting.",
-		      svc_ident(svc, NULL, 0));
+		logit(LOG_CONSOLE | LOG_WARNING, "Service %s:%s keeps crashing, not restarting.",
+		      basename(svc->cmd), svc->id);
 		svc_crashing(svc);
 		*restart_cnt = 0;
 		svc->restart_tmo = svc->restart_saved;
@@ -2243,8 +2245,8 @@
 	timeout = ((*restart_cnt) <= (svc->restart_max / 2)) ? 2000 : 5000;
 	/* If a longer timeout was specified in the conf, use that instead. */
 	svc->restart_tmo = max(svc->restart_tmo, timeout);
-	logit(LOG_CONSOLE|LOG_WARNING, "Service %s[%d] died, restarting in %d msec (%d/%d)",
-	      svc_ident(svc, NULL, 0), svc->oldpid, svc->restart_tmo, *restart_cnt, svc->restart_max);
+	logit(LOG_CONSOLE|LOG_WARNING, "Service %s:%s died, restarting in %d msec (%d/%d)",
+	      basename(svc->cmd), svc->id, svc->restart_tmo, *restart_cnt, svc->restart_max);
 
 	svc_unblock(svc);
 	service_step(svc);
